<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:fx="http://ns.adobe.com/mxml/2009"
				   width="300" initialize="doInit()"
				   xmlns:s="library://ns.adobe.com/flex/spark">
	<s:layout>
		<s:VerticalLayout gap="0"/>
	</s:layout>
	<fx:Declarations>
		<s:Parallel id="openUp" >
			<s:Resize target="{controls}" heightFrom="0" heightTo="200"/>		
			<!--<mx:Move target="{this}" yFrom="{this.height-20}" yTo="0"/>-->
		</s:Parallel>
		<s:Parallel id="closeUp" >
			<s:Resize target="{controls}" heightFrom="200" heightTo="0"/>	
			<!--<mx:Move target="{this}" yFrom="0" yTo="{this.height-20}"/>-->	
		</s:Parallel>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.socialesque.zlogger.http.event.GetNewSessionIdEvent;
			import com.socialesque.zlogger.http.command.GetNewSessionIdCommand;
			import com.socialesque.trails.event.CreateSessionEvent;
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.socialesque.trails.event.NotifyRenderRequested;
			import com.socialesque.trails.control.TrailsController;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.socialesque.trails.event.NotifySessionCreated;
			import com.socialesque.trails.model.TrailsModel;
			
			[Bindable] private var model:TrailsModel = TrailsModel.getInstance();
			
			[Bindable] public var title:String = "Sessions";
			
			private function toggleVisibility() : void {
				controls.visible = !controls.visible;
			}
			
			private function doNew() : void { 
				//new GetNewSessionIdEvent().dispatch();
				new CreateSessionEvent().dispatch();
			}
			
			private function doInit() : void {
				enableListeners();
			}
			
			private function enableListeners() : void {
				CairngormEventDispatcher.getInstance().addEventListener(TrailsController.NOTIFY_SESSION_CREATED, handleSessionCreated);
			} 
			
			private function disableListeners() : void {
				CairngormEventDispatcher.getInstance().removeEventListener(TrailsController.NOTIFY_SESSION_CREATED, handleSessionCreated);
			} 
			
			private function sessionLabelFunction(obj:Object) : String {
				return obj.id+" --> "+obj.createdAt.toString();
			}
			
			private function deleteSession(sessionId:Number) : void {
				var session:Object = this.sessionChooser.selectedItem;	
				model.sessionDataDictionary[session] = null;
				model.sessions.removeItemAt(model.sessions.getItemIndex(session));

				this.sessionChooser.selectedIndex = 0;
				if (model.sessions.length==0)
					model.isRecording = false;
				refresh();
			} 
			
			private function handleSessionCreated(event:CairngormEvent) : void { 
				var e:NotifySessionCreated = event as NotifySessionCreated;
				for each (var item:Object in model.sessions)
					if (item.id==e.session.id && this.sessionChooser)
						this.sessionChooser.selectedItem = item;
			}
			
			private function refresh() : void {
				model.activeSession = this.sessionChooser.selectedItem;
				new NotifyRenderRequested().dispatch();
			}
			
			private function doClear() : void {
				model.sessionDataDictionary[model.activeSession] = new Array();
				new NotifyRenderRequested().dispatch();
			}
		]]>
	</fx:Script>
	<s:Group width="100%" height="24" click="toggleVisibility()">
		<s:layout>
			<s:VerticalLayout paddingBottom="12" paddingTop="4" horizontalAlign="center" verticalAlign="middle"/>
		</s:layout>
		<!--s:BorderContainer id="labelBox" width="100%" cornerRadius="10" borderStyle="solid" backgroundColor="0xaaaaaa" backgroundAlpha="1.0" >-->
		<mx:Label text="{title}"/>
		<!--</s:BorderContainer>-->
		<s:BorderContainer width="100%" height="8" backgroundColor="0xaaaaaa" backgroundAlpha="1.0" />	
	</s:Group>
	<!--<s:VGroup width="100%" height="24" click="toggleVisibility()">
		
			<mx:Label text="{title}"/>
		<s:BorderContainer width="100%" height="8" backgroundColor="0xaaaaaa" backgroundAlpha="1.0" />	
	</s:VGroup>-->
	
	<s:BorderContainer id="controls"  width="100%" visible="false" height="0" showEffect="openUp" hideEffect="closeUp" backgroundColor="0xdddddd" backgroundAlpha="0.5">
		<s:layout>
			<s:VerticalLayout paddingTop="8" paddingLeft="6" paddingRight="6" paddingBottom="4"/>
		</s:layout>
		<s:HGroup width="100%" verticalAlign="middle">
			<mx:LinkButton label="New" click="doNew()"/>
			<mx:LinkButton label="Delete" click="deleteSession(this.sessionChooser.selectedItem.id)"/>
			<mx:LinkButton label="Clear Contents" click="doClear()"/>
		</s:HGroup>

		<s:List id="sessionChooser" width="100%" height="100%" dataProvider="{model.sessions}" 
			labelFunction="sessionLabelFunction" selectedIndex="0" color="black" change="refresh()" skinClass="com.socialesque.trails.skins.SmallListSkin"/>
	</s:BorderContainer>
</s:Group>
